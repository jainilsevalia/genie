name: PR Review Bot
on:
  pull_request:
    types: [opened, synchronize]
jobs:
  review:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Install and Start Ollama
        run: |
          # Install Ollama
          curl -L https://ollama.ai/install.sh | sh
          
          # Start Ollama in background
          ollama serve &
          
          # Print processes for debugging
          echo "Checking Ollama processes:"
          ps aux | grep ollama
          
          # Wait for Ollama with increased timeout and debugging
          echo "Waiting for Ollama to be ready..."
          timeout 180s bash -c '
            while ! curl -sf http://localhost:11434/api/health >/dev/null 2>&1; do
              echo "Waiting for Ollama... $(date)"
              ps aux | grep ollama
              sleep 5
            done
          '
          
          # If we get here, Ollama is ready
          echo "Ollama is ready, pulling model..."
          ollama pull codellama
          
      - name: Check Ollama Status
        run: |
          if ! curl -sf http://localhost:11434/api/health > /dev/null; then
            echo "Ollama is not responding"
            sudo systemctl status ollama
            exit 1
          fi

      - name: PR Review
        uses: actions/github-script@v7
        with:
          script: |
            const util = require('util');
            const exec = util.promisify(require('child_process').exec);

            const prNumber = context.payload.pull_request.number;
            const repo = context.repo;
            
            // Get the PR diff
            const { data: files } = await github.rest.pulls.listFiles({
              ...repo,
              pull_number: prNumber,
            });
            
            // Get PR details
            const { data: pullRequest } = await github.rest.pulls.get({
              ...repo,
              pull_number: prNumber,
            });

            for (const file of files) {
              // Get file content
              const { data: fileContent } = await github.rest.repos.getContent({
                ...repo,
                path: file.filename,
                ref: pullRequest.head.sha,
              });

              const content = Buffer.from(fileContent.content, 'base64').toString();
              
              // Prepare prompt for CodeLlama
              const prompt = `Review this code change and provide specific, actionable feedback:
              
              File: ${file.filename}
              Changes:
              ${file.patch}

              Please analyze for:
              1. Potential bugs
              2. Security issues
              3. Performance improvements
              4. Code style and best practices
              5. Documentation needs

              Provide specific, line-by-line feedback where applicable.`;

              try {
                // Call local Ollama API
                const { stdout } = await exec(`curl -X POST http://localhost:11434/api/generate -d '{
                  "model": "codellama",
                  "prompt": ${JSON.stringify(prompt)},
                  "stream": false
                }'`);

                const response = JSON.parse(stdout);
                const review = response.response;

                // Post review comment
                await github.rest.pulls.createReviewComment({
                  ...repo,
                  pull_number: prNumber,
                  body: review,
                  commit_id: context.payload.pull_request.head.sha,
                  path: file.filename,
                  line: file.patch ? file.patch.split('\n').length : 1
                });
              } catch (error) {
                console.error(`Error reviewing ${file.filename}:`, error);
              }
            } 
