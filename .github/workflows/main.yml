name: PR Review Bot
on:
  pull_request:
    types: [opened, synchronize]

jobs:
  review:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: PR Review
        uses: actions/github-script@v7
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        with:
          script: |
            const https = require('https');
            
            async function callClaudeAPI(prompt) {
              return new Promise((resolve, reject) => {
                const data = JSON.stringify({
                  model: "claude-3-opus-20240229",
                  max_tokens: 4000,
                  messages: [{
                    role: "user",
                    content: prompt
                  }]
                });
                
                const options = {
                  hostname: 'api.anthropic.com',
                  path: '/v1/messages',
                  method: 'POST',
                  headers: {
                    'Content-Type': 'application/json',
                    'x-api-key': process.env.ANTHROPIC_API_KEY,
                    'anthropic-version': '2023-06-01'
                  }
                };
                
                const req = https.request(options, (res) => {
                  let responseData = '';
                  
                  res.on('data', (chunk) => {
                    responseData += chunk;
                  });
                  
                  res.on('end', () => {
                    try {
                      if (res.statusCode !== 200) {
                        reject(new Error(`Claude API returned status ${res.statusCode}: ${responseData}`));
                        return;
                      }
                      
                      const response = JSON.parse(responseData);
                      if (!response.content || !Array.isArray(response.content) || !response.content[0]) {
                        reject(new Error(`Invalid Claude API response format: ${responseData}`));
                        return;
                      }
                      
                      resolve(response.content[0].text);
                    } catch (error) {
                      reject(new Error(`Failed to parse Claude API response: ${error.message}\nResponse: ${responseData}`));
                    }
                  });
                });
                
                req.on('error', (error) => {
                  reject(new Error(`Claude API request failed: ${error.message}`));
                });
                
                req.write(data);
                req.end();
              });
            }
            
            async function reviewPR() {
              // Get the PR diff
              const { data: files } = await github.rest.pulls.listFiles({
                ...context.repo,
                pull_number: context.payload.pull_request.number
              });
              
              // Get PR details
              const { data: pullRequest } = await github.rest.pulls.get({
                ...context.repo,
                pull_number: context.payload.pull_request.number
              });
              
              for (const file of files) {
                try {
                  // Skip binary files and non-code files
                  if (file.status === 'removed' || 
                      file.filename.endsWith('.pdf') || 
                      file.filename.endsWith('.docx') || 
                      file.filename.endsWith('.prof')) {
                    console.log(`Skipping file ${file.filename} (binary or removed file)`);
                    continue;
                  }
                  
                  // Get file content
                  try {
                    const { data: fileContent } = await github.rest.repos.getContent({
                      ...context.repo,
                      path: file.filename,
                      ref: pullRequest.head.sha
                    });
                    
                    const content = Buffer.from(fileContent.content, 'base64').toString();
                    
                    // Prepare prompt for Claude
                    const prompt = `You are a highly experienced code reviewer. Please review the following code changes and provide specific, actionable feedback.

                    File: ${file.filename}
                    Changes:
                    ${file.patch || 'New file'}

                    Please analyze and provide detailed feedback on:
                    1. Potential bugs or logical errors
                    2. Security vulnerabilities or concerns
                    3. Performance optimizations
                    4. Code style and best practices
                    5. Documentation completeness
                    
                    Format your response as clear, constructive feedback with specific line references where applicable. Be concise but thorough.`;
                    
                    // Generate review using Claude
                    console.log(`Reviewing file ${file.filename}...`);
                    const review = await callClaudeAPI(prompt);
                    
                    if (!review) {
                      throw new Error('Empty review received from Claude API');
                    }
                    
                    // Post review comment
                    await github.rest.pulls.createReviewComment({
                      ...context.repo,
                      pull_number: context.payload.pull_request.number,
                      body: review,
                      commit_id: pullRequest.head.sha,
                      path: file.filename,
                      line: file.patch ? file.patch.split('\n').length : 1
                    });
                    
                    console.log(`Successfully reviewed ${file.filename}`);
                  } catch (error) {
                    if (error.status === 404) {
                      console.log(`File ${file.filename} not found, skipping`);
                      continue;
                    }
                    throw error;
                  }
                } catch (error) {
                  console.error(`Error processing file ${file.filename}:`, error);
                  core.error(`Failed to review file ${file.filename}: ${error.message}`);
                  continue;
                }
              }
            }
            
            // Run the review
            try {
              await reviewPR();
            } catch (error) {
              console.error('Error in PR review process:', error);
              core.setFailed(error.message);
            }
