name: PR Review Bot
on:
  pull_request:
    types: [opened, synchronize]
jobs:
  review:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Install and Start Ollama
        run: |
          # Install Ollama
          curl -L https://ollama.ai/install.sh | sh
          
          # Start Ollama in background with output logging
          nohup ollama serve > ollama.log 2>&1 &
          
          # Store the PID
          echo $! > ollama.pid
          
          # Wait for Ollama to be ready
          echo "Waiting for Ollama to be ready..."
          timeout 180s bash -c '
            while ! curl -sf http://localhost:11434/ >/dev/null 2>&1; do
              echo "Waiting for Ollama... $(date)"
              sleep 5
            done
          '
          
          # Pull the model
          echo "Pulling CodeLlama model..."
          ollama pull codellama
          
          # Verify model is available
          echo "Verifying model..."
          ollama list | grep codellama
          
          # Keep Ollama running for subsequent steps
          disown $(cat ollama.pid)
      
      - name: PR Review
        uses: actions/github-script@v7
        with:
          script: |
            const util = require('util');
            const exec = util.promisify(require('child_process').exec);
            const prNumber = context.payload.pull_request.number;
            const repo = context.repo;
            
            // Additional error handling for Ollama
            try {
              // Test Ollama is responding before starting review
              await exec('curl -sf http://localhost:11434/');
            } catch (error) {
              console.error('Ollama is not responding:', error);
              core.setFailed('Ollama service is not available');
              return;
            }
            
            try {
              // Get the PR diff
              const { data: files } = await github.rest.pulls.listFiles({
                ...repo,
                pull_number: prNumber,
              });
              
              // Get PR details
              const { data: pullRequest } = await github.rest.pulls.get({
                ...repo,
                pull_number: prNumber,
              });
              
              for (const file of files) {
                try {
                  // Get file content with error handling
                  const { data: fileContent } = await github.rest.repos.getContent({
                    ...repo,
                    path: file.filename,
                    ref: pullRequest.head.sha,
                  });
                  
                  const content = Buffer.from(fileContent.content, 'base64').toString();
                  
                  // Call Ollama with increased timeout and error handling
                  const { stdout } = await exec(`curl -m 300 -X POST http://localhost:11434/api/generate -d '{
                    "model": "codellama",
                    "prompt": ${JSON.stringify(prompt)},
                    "stream": false
                  }'`, { maxBuffer: 10 * 1024 * 1024 });
                  
                  const response = JSON.parse(stdout);
                  
                  // Post review comment
                  await github.rest.pulls.createReviewComment({
                    ...repo,
                    pull_number: prNumber,
                    body: response.response,
                    commit_id: context.payload.pull_request.head.sha,
                    path: file.filename,
                    line: file.patch ? file.patch.split('\n').length : 1
                  });
                } catch (error) {
                  console.error(`Error processing file ${file.filename}:`, error);
                  continue; // Continue with next file even if one fails
                }
              }
            } catch (error) {
              console.error('Error in PR review process:', error);
              core.setFailed(error.message);
            }
